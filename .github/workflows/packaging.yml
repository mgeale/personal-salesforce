# Unique name for this workflow
name: Packaging

# Workflow starts when receiving start-packaging custom event
# Event contains the packageName of the target package for which a new version will be released
on:
    repository_dispatch:
        types: [start-packaging]

# Jobs to be executed
jobs:
    release-package-version:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                  ref: ${{ github.event.client_payload.ref }}

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: 'Remove auth file'
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Create package version - Core App
            - name: 'Create package version - Core App'
              id: package-coreApp
              if: ${{ contains(github.event.client_payload.packageNames, 'CoreApp') }}
              run: |
                  set +e
                  json=$(sfdx force:package:version:create -p CoreApp -x -w 20 --json --codecoverage)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Create package version - Portfolio App
            - name: 'Create package version - Portfolio App'
              id: package-portfolioApp
              if: ${{ contains(github.event.client_payload.packageNames, 'PortfolioApp') }}
              run: |
                  set +e
                  json=$(sfdx force:package:version:create -p PortfolioApp -x -w 20 --json --codecoverage)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Create package version - Mortgage App
            - name: 'Create package version - Mortgage App'
              id: package-mortgageApp
              if: ${{ contains(github.event.client_payload.packageNames, 'MortgageApp') }}
              run: |
                  set +e
                  json=$(sfdx force:package:version:create -p MortgageApp -x -w 20 --json --codecoverage)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Wait for package replication
            - name: 'Wait for package replication'
              uses: maddox/actions/sleep@master
              with:
                  args: 300

            # Update sfdx-project.json and README to use only latest package version
            - name: 'Update sfdx-project.json and README'
              uses: trailheadapps/github-action-sfdx-packaging-updater@1.1.0

            # Store secret for target environment
            - name: 'Populate auth file with SFDX_URL secret'
              shell: bash
              run: |
                  branch=$(echo '${{ github.event.client_payload.branch }}')
                  if [[ $branch == "uat" ]]; then
                      echo ${{ secrets.UAT_SFDX_URL}} > ./SFDX_URL.txt
                  elif [[ $branch == "main" ]]; then
                      echo ${{ secrets.MAIN_SFDX_URL}} > ./SFDX_URL.txt
                  fi
                  secretFileSize=$(wc -c "./SFDX_URL.txt" | awk '{print $1}')
                  if [[ $secretFileSize == 1 ]]; then
                      echo "Missing SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate target environment
            - name: 'Authenticate target environment'
              run: |
                  branch=$(echo '${{ github.event.client_payload.branch }}')
                  sfdx auth:sfdxurl:store -f ./SFDX_URL.txt -a $branch -d

            # Remove auth file
            - name: 'Remove auth file'
              run: rm -f ./SFDX_URL.txt

            # Get package version IDs
            - name: 'Get package version IDs'
              id: packageVersions
              run: |
                  versionIds=$(cat sfdx-project.json | jq -c -r '.packageAliases | map_values( select( . | startswith("04t") ) )')
                  versionIds=$(echo "$versionIds" | sed -E 's,@[0-9]+\.[0-9]+\.[0-9]+\-[0-9]+,,g')
                  echo "::set-output name=ids::$versionIds"

            # Install - Core App
            - name: 'Install Core App'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.CoreApp')
                  branch=$(echo '${{ github.event.client_payload.branch }}')
                  sfdx force:package:install --package $versionId -w 10 -u $branch -r

            # Install - Portfolio App
            - name: 'Install Portfolio App'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.PortfolioApp')
                  branch=$(echo '${{ github.event.client_payload.branch }}')
                  sfdx force:package:install --package $versionId -w 10 -u $branch -r

            # Install - Mortgage App
            - name: 'Install Mortgage App'
              run: |
                  versionId=$(echo '${{ steps.packageVersions.outputs.ids }}' | jq -r '.MortgageApp')
                  branch=$(echo '${{ github.event.client_payload.branch }}')
                  sfdx force:package:install --package $versionId -w 10 -u $branch -r

            # The main branch is protected, so we have to take a sequea for updating the README through a new PR
            - name: 'Create PR for new package versions'
              id: create-pr
              uses: peter-evans/create-pull-request@v3
              with:
                  title: 'Released new package versions'
                  body: |
                      Released new package versions:

                      - CoreApp ${{ steps.package-coreApp.outputs.packageVersionId }}
                      - PortfolioApp ${{ steps.package-portfolioApp.outputs.packageVersionId }}
                      - MortgageApp ${{ steps.package-mortgageApp.outputs.packageVersionId }}
                  author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
                  commit-message: 'Released new package versions'
                  branch: 'auto/packaging-${{ github.run_id }}'
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}

            # Approve pull request
            - name: 'Approve pull request'
              uses: juliangruber/approve-pull-request-action@v1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  number: ${{ steps.create-pr.outputs.pull-request-number }}

            # Wait for CI to be skipped on pull request
            - name: 'Wait for CI to be skipped on pull request'
              uses: maddox/actions/sleep@master
              with:
                  args: 60

            # Merge pull request
            - name: 'Merge pull request'
              uses: juliangruber/merge-pull-request-action@v1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  number: ${{ env.PULL_REQUEST_NUMBER }}
                  method: squash
